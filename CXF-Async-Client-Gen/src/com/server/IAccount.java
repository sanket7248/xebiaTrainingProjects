package com.server;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.2.7
 * 2019-01-16T10:58:27.173+05:30
 * Generated source version: 3.2.7
 *
 */
@WebService(targetNamespace = "http://server.com/", name = "IAccount")
@XmlSeeAlso({ObjectFactory.class})
public interface IAccount {

    @WebMethod(operationName = "getDetails")
    @RequestWrapper(localName = "getDetails", targetNamespace = "http://server.com/", className = "com.server.GetDetails")
    @ResponseWrapper(localName = "getDetailsResponse", targetNamespace = "http://server.com/", className = "com.server.GetDetailsResponse")
    public Response<com.server.GetDetailsResponse> getDetailsAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        double arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        java.lang.String arg1
    );

    @WebMethod(operationName = "getDetails")
    @ResponseWrapper(localName = "getDetailsResponse", targetNamespace = "http://server.com/", className = "com.server.GetDetailsResponse")
    @RequestWrapper(localName = "getDetails", targetNamespace = "http://server.com/", className = "com.server.GetDetails")
    public Future<?> getDetailsAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        double arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        java.lang.String arg1,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<com.server.GetDetailsResponse> asyncHandler
    );

    @WebMethod
    @RequestWrapper(localName = "getDetails", targetNamespace = "http://server.com/", className = "com.server.GetDetails")
    @ResponseWrapper(localName = "getDetailsResponse", targetNamespace = "http://server.com/", className = "com.server.GetDetailsResponse")
    @WebResult(name = "return", targetNamespace = "")
    public int getDetails(
        @WebParam(name = "arg0", targetNamespace = "")
        double arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        java.lang.String arg1
    );

    @WebMethod(operationName = "update")
    @RequestWrapper(localName = "update", targetNamespace = "http://server.com/", className = "com.server.Update")
    @ResponseWrapper(localName = "updateResponse", targetNamespace = "http://server.com/", className = "com.server.UpdateResponse")
    public Response<com.server.UpdateResponse> updateAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        java.lang.String arg0
    );

    @WebMethod(operationName = "update")
    @ResponseWrapper(localName = "updateResponse", targetNamespace = "http://server.com/", className = "com.server.UpdateResponse")
    @RequestWrapper(localName = "update", targetNamespace = "http://server.com/", className = "com.server.Update")
    public Future<?> updateAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        java.lang.String arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<com.server.UpdateResponse> asyncHandler
    );

    @WebMethod
    @RequestWrapper(localName = "update", targetNamespace = "http://server.com/", className = "com.server.Update")
    @ResponseWrapper(localName = "updateResponse", targetNamespace = "http://server.com/", className = "com.server.UpdateResponse")
    public void update(
        @WebParam(name = "arg0", targetNamespace = "")
        java.lang.String arg0
    );
}
